{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","sounds","key","mp3","App","id","className","map","sound","idx","text","audio","DrumPad","props","playSound","current","play","parent","parentNode","classList","add","querySelector","innerText","React","createRef","this","addEventListener","e","target","remove","onClick","ref","src","Component","document","toUpperCase","getElementById","currentTime","ReactDom","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8HCKrCC,G,YAAQ,CACV,CACEC,IAAI,IACJC,IAAI,4DAEN,CACED,IAAI,IACJC,IAAI,4DAEN,CACED,IAAI,IACJC,IAAI,4DAEN,CACED,IAAI,IACJC,IAAI,8DAEN,CACED,IAAI,IACJC,IAAI,4DAEN,CACED,IAAI,IACJC,IAAI,0DAEN,CACED,IAAI,IACJC,IAAI,4DAEN,CACED,IAAI,IACJC,IAAI,8DAEL,CACCD,IAAI,IACJC,IAAI,4DAKFC,EAAM,kBACJ,yBAAKC,GAAG,UAAUC,UAAU,WAC1B,4CACCL,EAAOM,KAAI,SAACC,EAAMC,GAAP,OACV,kBAAC,EAAD,CAASC,KAAMF,EAAMN,IAAKA,IAAKO,EAAKE,MAAOH,EAAML,WAOvDS,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAWRC,UAAY,WACV,EAAKH,MAAMI,QAAQC,OACnB,IAAMX,EAAI,EAAKM,MAAMI,QAAQV,GACvBY,EAAS,EAAKN,MAAMI,QAAQG,WAClCD,EAAOE,UAAUC,IAAI,UACLH,EAAOC,WACfG,cAAc,MAAMC,UAA5B,UAA0CjB,EAA1C,gBAhBA,EAAKM,MAAQY,IAAMC,YAFH,E,gEAMhBC,KAAKd,MAAMI,QAAQW,iBAAiB,SAAQ,SAACC,GAC9BA,EAAEC,OAAOV,WACfC,UAAUU,OAAO,e,+BAcnB,IAAD,EAEgBJ,KAAKZ,MAApBH,EAFD,EAECA,KAAMC,EAFP,EAEOA,MACb,OACF,yBAAKL,UAAU,WAAWwB,QAAUL,KAAKX,UAAWT,GAAE,eAAUK,IAEzDA,EACD,2BAAOqB,IAAKN,KAAKd,MAAOqB,IAAKrB,EAAOL,UAAU,OAAOD,GAAIK,S,GA/B3Ca,IAAMU,WAqC5BC,SAASR,iBAAiB,WAAU,SAACC,GACnC,IAAMtB,EAAIsB,EAAEzB,IAAIiC,cACVxB,EAAQuB,SAASE,eAAe/B,GACtC,GAAGM,EAAM,CACPA,EAAM0B,YAAY,EAClB,IAAMpB,EAASN,EAAMO,WACrBD,EAAOE,UAAUC,IAAI,UACLH,EAAOC,WACfG,cAAc,MAAMC,UAA5B,UAA0CjB,EAA1C,eACAM,EAAMK,WAIVsB,IAASC,OAAO,kBAAC,EAAD,MAAQL,SAASE,eAAe,iBAEnChC,QChGKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASE,eAAe,iBDyHpB,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30a88dc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDom from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst sounds =[\n    {\n      key:'Q',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n    },\n    {\n      key:'W',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n    },\n    {\n      key:'E',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n    },\n    {\n      key:'A',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n    },\n    {\n      key:'S',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n    },\n    {\n      key:'D',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n    },\n    {\n      key:'Z',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n    },\n    {\n      key:'X',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n    },\n     {\n      key:'C',\n      mp3:'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n    }\n    \n  ]\n  \n  const App = () => (\n          <div id=\"display\" className=\"display\">\n            <h1>Play a Sound</h1>\n            {sounds.map((sound,idx)=>(\n              <DrumPad text={sound.key} key={idx} audio={sound.mp3}/>\n            ))} \n          </div>      \n  );\n  \n  \n  \n  class DrumPad extends React.Component{\n   \n    constructor(props){\n      super(props);\n      this.audio = React.createRef();   \n    }\n    \n    componentDidMount(){\n      this.audio.current.addEventListener('ended',(e) => {\n        const parent=e.target.parentNode;\n        parent.classList.remove('active');\n      });\n    }\n    \n    playSound = () =>{\n      this.audio.current.play();\n      const id =this.audio.current.id;\n      const parent = this.audio.current.parentNode;\n      parent.classList.add('active');\n      const display = parent.parentNode;\n      display.querySelector('h1').innerText =`${id} is playing`;\n      \n     \n    }\n    render(){\n      \n      const{ text, audio} = this.props;\n      return(\n    <div className=\"drum-pad\" onClick ={this.playSound} id={`drum-${text}`} >\n     \n          {text}\n          <audio ref={this.audio} src={audio} className=\"clip\" id={text}/>\n    </div>\n      );\n    }\n  }\n  \n  document.addEventListener('keydown',(e)=>{\n    const id =e.key.toUpperCase();\n    const audio = document.getElementById(id);\n    if(audio){\n      audio.currentTime=0;\n      const parent = audio.parentNode;\n      parent.classList.add('active');\n      const display = parent.parentNode;\n      display.querySelector('h1').innerText =`${id} is playing`;\n      audio.play();\n      \n    } \n  });\n  ReactDom.render(<App />,document.getElementById(\"drum-machine\"))\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('drum-machine')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}